/**
 * üìö POSTS API SERVICE
 * 
 * –ü–æ–ª–Ω—ã–π –Ω–∞–±–æ—Ä –º–µ—Ç–æ–¥–æ–≤ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ø–æ—Å—Ç–∞–º–∏
 * –í—Å–µ —Ñ—É–Ω–∫—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞—é—Ç Promises –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç async/await
 */

/**
 * üóûÔ∏è –ü–æ–ª—É—á–∞–µ—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –ø–æ—Å—Ç–æ–≤
 * @returns {Promise<Array>} –ú–∞—Å—Å–∏–≤ –ø–æ—Å—Ç–æ–≤
 * @throws {Error} –ü—Ä–∏ –æ—à–∏–±–∫–µ –∑–∞–ø—Ä–æ—Å–∞
 */
export async function getPosts() {
    try {
        const response = await fetch("/api/posts");
        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –ø–æ—Å—Ç—ã");
        }

        return data.posts;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤:", error);
        throw error;
    }
}

/**
 * üìÑ –ü–æ–ª—É—á–∞–µ—Ç –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π –ø–æ—Å—Ç –ø–æ ID
 * @param {string|number} id - ID –ø–æ—Å—Ç–∞
 * @returns {Promise<Object>} –û–±—ä–µ–∫—Ç –ø–æ—Å—Ç–∞
 * @throws {Error} –ï—Å–ª–∏ –ø–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω
 */
export async function getPost(id) {
    try {
        const response = await fetch(`/api/posts/${id}`);
        const data = await response.json();

        if (!response.ok) {
            throw new Error(data.message || "–ü–æ—Å—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω");
        }

        return data.post;
    } catch (error) {
        console.error(`üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ${id}:`, error);
        throw error;
    }
}

export async function getPostsByContextByRoleByStatus(role, role_context, status) {
    try {
        
        const response = await fetch("http://localhost:5000/api/posts/status/context", {
            method: "POST",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({ role, role_context, status })
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");

        return data.posts;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ø–æ—Å—Ç–æ–≤ –≥—Ä—É–ø–ø—ã:", error);
        throw error;
    }
}

/**
 * ‚úèÔ∏è –û–±–Ω–æ–≤–ª—è–µ—Ç —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ø–æ—Å—Ç
 * @param {string|number} postId - ID –ø–æ—Å—Ç–∞
 * @param {string} updateName - –ù–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ
 * @param {string} updateText - –ù–æ–≤—ã–π —Ç–µ–∫—Å—Ç
 * @param {string} updateForFieled - –ù–æ–≤–æ–µ –ø–æ–ª–µ
 * @param {boolean} updateVisible - –í–∏–¥–∏–º–æ—Å—Ç—å
 * @param {string} updateForGroup - –ì—Ä—É–ø–ø–∞
 * @returns {Promise<Object>} –û–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π –ø–æ—Å—Ç
 */
export const updatePost = async (postId, updateName, updateText, updateForFieled, updateVisible, updateForGroup) => {
    try {
        const response = await fetch(`/api/posts/update/${postId}`, {
            method: "PUT",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                id: postId,
                name: updateName,
                text: updateText,
                forField: updateForFieled,
                visible: updateVisible,
                group: updateForGroup
            })
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");

        return data;
    } catch (error) {
        console.error(`üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ${postId}:`, error);
        throw error;
    }
};
export const updatePostStatus = async (postId, status) => {
    try {
        const response = await fetch(`http://localhost:5000/api/posts/update/status`, {
            method: "PATCH",
            headers: { "Content-Type": "application/json" },
            body: JSON.stringify({
                id: postId,
                status: status,
            })
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.message || "–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è");

        return data;
    } catch (error) {
        console.error(`üö® –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ —É –ø–æ—Å—Ç–∞ ${postId}:`, error);
        throw error;
    }
};


/**
 * üñºÔ∏è –°–æ–∑–¥–∞–µ—Ç –ø–æ—Å—Ç —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 * @param {FormData} data - –î–∞–Ω–Ω—ã–µ —Ñ–æ—Ä–º—ã —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º
 * @returns {Promise<Object>} –°–æ–∑–¥–∞–Ω–Ω—ã–π –ø–æ—Å—Ç
 */
export async function addPost(data) {
    try {
        const response = await fetch("http://localhost:5000/api/posts/new", {
            method: "POST",
            body: data
        });

        const result = await response.json();
        if (!response.ok) throw new Error(result.message || "–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏");
        return result;
    } catch (error) {
        console.error("üö® –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–∞ —Å –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º:", error);
        throw error;
    }
}

/**
 * üóëÔ∏è –£–¥–∞–ª—è–µ—Ç –ø–æ—Å—Ç
 * @param {string|number} id - ID –ø–æ—Å—Ç–∞
 * @returns {Promise<boolean>} true –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ
 */
export async function deletePost(id) {
    try {
        const response = await fetch(`/api/posts/delete/${id}`, {
            method: "DELETE",
            headers: { "Content-Type": "application/json" }
        });

        const data = await response.json();
        if (!response.ok) throw new Error(data.message || "–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è");

        return true;
    } catch (error) {
        console.error(`üö® –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø–æ—Å—Ç–∞ ${id}:`, error);
        return false;
    }
}